/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateArtistArgs } from "./CreateArtistArgs";
import { UpdateArtistArgs } from "./UpdateArtistArgs";
import { DeleteArtistArgs } from "./DeleteArtistArgs";
import { ArtistCountArgs } from "./ArtistCountArgs";
import { ArtistFindManyArgs } from "./ArtistFindManyArgs";
import { ArtistFindUniqueArgs } from "./ArtistFindUniqueArgs";
import { Artist } from "./Artist";
import { Track } from "../../track/base/Track";
import { ArtistService } from "../artist.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Artist)
export class ArtistResolverBase {
  constructor(
    protected readonly service: ArtistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "read",
    possession: "any",
  })
  async _artistsMeta(
    @graphql.Args() args: ArtistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Artist])
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "read",
    possession: "any",
  })
  async artists(@graphql.Args() args: ArtistFindManyArgs): Promise<Artist[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Artist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "read",
    possession: "own",
  })
  async artist(
    @graphql.Args() args: ArtistFindUniqueArgs
  ): Promise<Artist | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Artist)
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "create",
    possession: "any",
  })
  async createArtist(@graphql.Args() args: CreateArtistArgs): Promise<Artist> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        track: args.data.track
          ? {
              connect: args.data.track,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Artist)
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "update",
    possession: "any",
  })
  async updateArtist(
    @graphql.Args() args: UpdateArtistArgs
  ): Promise<Artist | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          track: args.data.track
            ? {
                connect: args.data.track,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Artist)
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "delete",
    possession: "any",
  })
  async deleteArtist(
    @graphql.Args() args: DeleteArtistArgs
  ): Promise<Artist | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Track, {
    nullable: true,
    name: "track",
  })
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "read",
    possession: "any",
  })
  async resolveFieldTrack(
    @graphql.Parent() parent: Artist
  ): Promise<Track | null> {
    const result = await this.service.getTrack(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
